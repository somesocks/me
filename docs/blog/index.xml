<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on James Larsen</title>
    <link>https://somesocks.github.io/me/blog/</link>
    <description>Recent content in Blogs on James Larsen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>true</copyright>
    <lastBuildDate>Thu, 31 Aug 2017 21:23:22 +0200</lastBuildDate>
    
	<atom:link href="https://somesocks.github.io/me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Better Callback Hell</title>
      <link>https://somesocks.github.io/me/blog/a-better-callback-hell/</link>
      <pubDate>Thu, 31 Aug 2017 21:23:22 +0200</pubDate>
      
      <guid>https://somesocks.github.io/me/blog/a-better-callback-hell/</guid>
      <description>In my day-to-day work, I write quite a lot of JavaScript. And, you really can&amp;rsquo;t get far in JS before you have to write asynchronous code.
Thanks to first-class functions and closures, handling asynchronous code with callbacks is pretty easy in JS, compared to C++ or Java.
That said, it can get easy to write some sort of unreadable mess, especially when you have to chain asynchronous dependencies. We&amp;rsquo;re all pretty familiar with &amp;lsquo;callback hell&amp;rsquo;, where you nest callbacks inside callbacks ad nauseam:</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://somesocks.github.io/me/blog/hello/</link>
      <pubDate>Tue, 25 Jul 2017 21:23:22 +0200</pubDate>
      
      <guid>https://somesocks.github.io/me/blog/hello/</guid>
      <description>Hello, world!</description>
    </item>
    
  </channel>
</rss>